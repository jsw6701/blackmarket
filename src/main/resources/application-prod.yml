spring:
  datasource:
    url: jdbc:mysql://${DBURI}/blackmarket?useSSL=false&allowPublicKeyRetrieval=true
    username: ${DBADMIN}
    password: ${DBPASS}
    driver-class-name: com.mysql.cj.jdbc.Driver

  jpa:
    show-sql: true
    hibernate:
      ddl-auto: update
      naming-strategy: org.hibernate.cfg.ImprovedNamingStrategy
    properties:
      hibernate:
        dialect: org.hibernate.dialect.MySQL5InnoDBDialect

  security:
    oauth2:
      client:
        registration:
          google:
            clientId: ${GOOGLECLNT}
            clientSecret: ${GOOGLESEC}
            redirectUri: "{baseUrl}/oauth2/callback/{registrationId}"
            scope:
              - email
              - profile
          kakao:
            clientId: ${KAKAOCLNT}
            clientSecret: ${KAKAOSEC}
            authorization-grant-type: authorization_code
            redirectUri: "{baseUrl}/oauth2/callback/{registrationId}"
            scope:
              - profile_nickname
              - profile_image
              - account_email
            client-authentication-method: POST
            client-name: Kakao
          naver:
            clientId: ${NAVERCLNT}
            clientSecret: ${NAVERSEC}
            authorization-grant-type: authorization_code
            redirectUri: "{baseUrl}/oauth2/callback/{registrationId}"
            scope:
              - name
              - email
              - profile_image
              - phone_number
            client-authentication-method: POST
            client-name: Naver
        provider:
          kakao:
            authorizationUri: https://kauth.kakao.com/oauth/authorize
            tokenUri: https://kauth.kakao.com/oauth/token
            userInfoUri: https://kapi.kakao.com/v2/user/me
            userNameAttribute: id
          naver:
            authorizationUri: https://nid.naver.com/oauth2.0/authorize
            tokenUri: https://nid.naver.com/oauth2.0/token
            userInfoUri: https://openapi.naver.com/v1/nid/me
            userNameAttribute: response


app:
  auth:
    tokenSecret: ${APPTOKENSEC}
    tokenExpirationMsec: ${APPTOKENEXP}
  cors:
    allowedOrigins: http://localhost:3000,http://localhost:8080
  oauth2:
    # After successfully authenticating with the OAuth2 Provider,
    # we'll be generating an auth token for the user and sending the token to the
    # redirectUri mentioned by the client in the /oauth2/authorize request.
    # We're not using cookies because they won't work well in mobile clients.
    authorizedRedirectUris:
      - http://localhost:3000/oauth2/redirect

upload:
  directory: upload